// project-wide `build.gradle`

buildscript {
    ext {
        agp_version = '8.0.1'
        gms_version = '4.3.15'
        nav_version = '2.5.3'
        appcompat_version = '1.6.1'
        appdistribution_version = '4.0.0'
        crashlytics_version = '2.9.5'
        perf_version = '1.4.2'
        junit_version = '4.13.2'
        test_junit_version = '1.1.5'
        test_core_version = '1.4.0'
        test_rules_version = '1.4.0'
        test_runner_version = '1.4.0'
        test_monitor_version = '1.6.1'
        uiautomator_version = '2.2.0'
        espresso_version = '3.5.1'
    }
}

plugins {
    id 'com.android.application' version "$agp_version" apply false
    id 'com.android.library' version "$agp_version" apply false
    id 'androidx.navigation.safeargs' version "$nav_version" apply false
    id 'com.google.gms.google-services' version "$gms_version" apply false
    id 'com.google.firebase.appdistribution' version "$appdistribution_version" apply false
    id 'com.google.firebase.crashlytics' version "$crashlytics_version" apply false
    id 'com.google.firebase.firebase-perf' version "$perf_version" apply false
}

// Keystore Settings, loaded from keystore.properties
if (rootProject.file('keystore.properties').exists()) {
    def keystore = new Properties()
    keystore.load(new FileInputStream(rootProject.file('keystore.properties')))
    project.ext.set('debugKeystorePass',   keystore['debugKeystorePass'])
    project.ext.set('debugKeyAlias',       keystore['debugKeyAlias'])
    project.ext.set('debugKeyPass',        keystore['debugKeyPass'])
    project.ext.set('releaseKeystorePass', keystore['releaseKeystorePass'])
    project.ext.set('releaseKeyAlias',     keystore['releaseKeyAlias'])
    project.ext.set('releaseKeyPass',      keystore['releaseKeyPass'])
} else {
    logger.error('> File keystore.properties is missing.')
}

// Modules
allprojects {

    // when projects were evaluated
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

// rootProject > clean
task clean(type: Delete) {

    // cleanup Gradle logs
    def gradle = project.getGradle()
    new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
        if (it.getName().endsWith('.out.log')) {
            println(":clean removed: $it")
            it.delete()
        }
    }

    // delete build directories
    delete rootProject.buildDir
    delete project.buildDir
}
