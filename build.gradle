// project-wide `build.gradle`

plugins {
    id 'com.android.application' version "7.4.2" apply false
    id 'com.android.library' version "7.4.2" apply false
    id 'androidx.navigation.safeargs' version "2.5.3" apply false
    id 'com.google.gms.google-services' version "4.3.15" apply false
    id 'com.google.firebase.crashlytics' version "2.9.4" apply false
    id 'com.google.firebase.appdistribution' version "4.0.0" apply false
}

// Keystore Settings, loaded from keystore.properties
if(rootProject.file('keystore.properties').exists()) {
    def keystore = new Properties()
    keystore.load(new FileInputStream(rootProject.file('keystore.properties')))
    project.ext.set('debugKeystorePass',   keystore['debugKeystorePass'])
    project.ext.set('debugKeyAlias',       keystore['debugKeyAlias'])
    project.ext.set('debugKeyPass',        keystore['debugKeyPass'])
    project.ext.set('releaseKeystorePass', keystore['releaseKeystorePass'])
    project.ext.set('releaseKeyAlias',     keystore['releaseKeyAlias'])
    project.ext.set('releaseKeyPass',      keystore['releaseKeyPass'])
} else {
    logger.error('> File keystore.properties is missing.')
}

// Modules
allprojects {

    // when projects were evaluated
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

// rootProject > clean
task clean(type: Delete) {

    // cleanup Gradle logs
    def gradle = project.getGradle()
    new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
        if (it.getName().endsWith('.out.log')) {
            println(":clean removed: $it")
            it.delete()
        }
    }

    // delete build directories
    delete rootProject.buildDir
    delete project.buildDir
}
